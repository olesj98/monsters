{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-field/search-field.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","id","name","email","className","src","alt","CardList","monsters","map","SearchInput","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,YAAO,SAAC,GAIR,IAAD,IAJUC,QAClBC,GAGQ,aAAR,GAAQ,GAHRA,GACAC,EAEQ,EAFRA,KACAC,EACQ,EADRA,MAEA,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BJ,EAA1B,aAAyCK,IAAKJ,IACtD,6BAAKA,IACL,4BAAIC,SCNHI,G,MAAW,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC1B,OAAQ,qBAAKJ,UAAU,YAAf,SAEJI,EAASC,KAAI,SAAAT,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNlCS,G,MAAc,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACxC,OACE,uBAAOR,UAAU,SAASS,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCuCjEG,E,kDArCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOlC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA7B,GAAO,OAAIA,EACjDE,KAAK4B,cAAcC,SAASb,EAAYY,kBAE3C,OACE,sBAAK1B,UAAU,MAAf,UACE,oBAAIA,UAAU,UAAd,6BACA,cAAC,EAAD,CACEO,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAhCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.00f6736e.chunk.js","sourcesContent":["import './card.styles.css'\r\n\r\nexport const Card = ({monster: {\r\n    id,\r\n    name,\r\n    email\r\n} = {}}) => {\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${id}?set=set2`} alt={name}/>\r\n            <h1>{name}</h1>\r\n            <p>{email}</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = ({monsters}) => {\r\nreturn (<div className=\"card-list\">\r\n  {\r\n    monsters.map(monster => <Card key={monster.id} monster={monster}/>)\r\n  }\r\n</div>)\r\n}","import './search-input.styles.css'\r\n\r\nexport const SearchInput = ({placeholder, handleChange}) => {\r\n  return(\r\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/> \r\n  );\r\n}","import { Component } from 'react';\r\nimport './App.css';\r\nimport { CardList } from './components/card-list/card-list.component'\r\nimport { SearchInput } from './components/search-field/search-field.component'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({monsters: users}))\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ searchField: e.target.value })\r\n  }\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster => monster\r\n      .name.toLowerCase().includes(searchField.toLowerCase())\r\n    )\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"header1\">Monster Rolodex</h1>\r\n        <SearchInput\r\n          placeholder=\"search monsters\"\r\n          handleChange={this.handleChange}\r\n        />\r\n        <CardList monsters={filteredMonsters}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}